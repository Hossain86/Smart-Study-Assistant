  venv\Scripts\activate  
  D:
  cd D:\Python Codes\FullStackProject\backend 
  python app.py
  cd "D:\Python Codes\FullStackProject\frontend"
pip frezze > requirements.txt

npm run dev
 📁 Project Folder Structure

 🛠 1. Setting Up the Backend (Python)
> You can use FastAPI, Flask, or Django REST. I'll show FastAPI (recommended for modern APIs).

 🔹 Step 1: Create Backend Folder & Virtual Environment
sh
mkdir FullStackProject && cd FullStackProject
mkdir backend && cd backend
python -m venv venv   Create virtual environment
source venv/bin/activate   Activate (Mac/Linux)
venv\Scripts\activate   Activate (Windows)


 🔹 Step 2: Install Backend Dependencies
sh
pip install fastapi uvicorn pydantic SQLAlchemy psycopg2-binary

- fastapi → Web framework for APIs 🚀  
- uvicorn → ASGI server to run FastAPI  
- pydantic → Data validation  
- SQLAlchemy → ORM for databases  
- psycopg2-binary → PostgreSQL driver (use sqlite3 if using SQLite)  


---

 🎨 2. Setting Up the Frontend (React + TypeScript + Vite)
 🔹 Step 1: Create Frontend Folder
sh
cd ../   Go back to FullStackProject root
mkdir frontend && cd frontend
npm create vite@latest . -- --template react-ts


 🔹 Step 2: Install Dependencies
sh
npm install
npm install react-router-dom axios react-icons bootstrap

- react-router-dom → Routing 📌  
- axios → API requests 🌍  
- react-icons → Icons 🎨  
- bootstrap → UI Styling 👕  


backend
├── __pycache__
├── venv
├── .env
├── app.py
├── assignment_generator.py
├── coverpage_generator.py
├── coverpage_template.docx
├── coverpage_template2.docx
├── mcq_generator.py
├── narrative_generator.py
├── requirements.txt
└── vercel.json
frontend
├── node_modules
├── public
└── src
    ├── .gitignore
    ├── eslint.config.js
    ├── index.html
    ├── package-lock.json
    ├── package.json
    ├── README.md
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── vite.config.ts
    ├── .hintrc
    └── runtime.txt
.gitignore
.hintrc
README.md